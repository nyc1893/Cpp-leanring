/*
成员函数被重载的特征
（1）相同的范围（在同一个类中）； 
（2）函数名字相同； 
（3）参数不同； 
（4）virtual 关键字可有可无。 
覆盖是指派生类函数覆盖基类函数，特征是
（1）不同的范围（分别位于派生类与基类）； 
（2）函数名字相同； 
（3）参数相同； 
（4）基类函数必须有virtual 关键字。 
“隐藏”是指派生类的函数屏蔽了与其同名的基类函数，规则如下
（1）如果派生类的函数与基类的函数同名，但是参数不同。此时，不论有无virtual关键字，基类的函数将被隐藏（注意别与重载混淆）。 
（2）如果派生类的函数与基类的函数同名，并且参数也相同，但是基类函数没有virtual 关键字。此时，基类的函数被隐藏（注意别与覆盖混淆） 
3种情况怎么执行：
1。重载：看参数
2。隐藏：用什么就调用什么
3。覆盖：调用派生类
*/


#include <iostream>
using namespace std;
class Base

{

public:

    virtual void f(float x){ cout << "Base::f(float) " << x << endl; }

    void g(float x){ cout << "Base::g(float) " << x << endl; }

    virtual void h(float x){ cout << "Base::h(float) " << x << endl; }// have to add a virtual to avoid hide

};

    class Derived : public Base

{

public:

    virtual void f(float x){ cout << "Derived::f(float) " << x << endl; }

    void g(int x){ cout << "Derived::g(int) " << x << endl; }

    void h(float x){ cout << "Derived::h(float) " << x << endl; }

};


int main(void)

{

Derived  d;

Base *pb = &d;

Derived *pd = &d;


// Good : behavior depends solely on type of the object

pb->f(3.14f); // Derived::f(float) 3.14

pd->f(3.14f); // Derived::f(float) 3.14


// Bad : behavior depends on type of the pointer

pb->g(3.14f); // Base::g(float) 3.14

pd->g(3.14f); // Derived::g(int) 3        (surprise!)


// Bad : behavior depends on type of the pointer

pb->h(3.14f); // Base::h(float) 3.14      (surprise!)

pd->h(3.14f); // Derived::h(float) 3.14

return 0;
}
